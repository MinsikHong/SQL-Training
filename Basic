SELECT * FROM Customers;

However, to be compliant with the ANSI standard, they all support at least the major commands (such as SELECT, UPDATE, DELETE, INSERT, WHERE) in a similar manner.

Some of The Most Important SQL Commands:
SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index
SELECT CustomerName, City FROM Customers;

The following SQL statement selects all the columns from the "Customers" table:
Example:
SELECT * FROM Customers;

The following SQL statement selects only the DISTINCT values from the "Country" column in the "Customers" table:
Example:
SELECT DISTINCT Country FROM Customers;

The following SQL statement lists the number of different (distinct) customer countries:
Example:
SELECT COUNT(DISTINCT Country) FROM Customers;

The following SQL statement selects all the customers from the country "Mexico", in the "Customers" table:

Example:
SELECT * FROM Customers
WHERE Country='Mexico';        ('Mexico' means the column that has letter 'Mexico')
or
SELECT * FROM Customers
WHERE CustomerID=1;

Operators in The WHERE Clause
The following operators can be used in the WHERE clause:

Operator	Description	Example:
=	Equal	
>	Greater than	
<	Less than	
>=	Greater than or equal	
<=	Less than or equal	
<>	Not equal. Note: In some versions of SQL this operator may be written as !=	
BETWEEN	Between a certain range	
LIKE	Search for a pattern	
IN	To specify multiple possible values for a column




The following SQL statement selects all fields from "Customers" where country is "Germany" AND city is "Berlin":
Example:
SELECT * FROM Customers
WHERE Country='Germany' AND City='Berlin';

The following SQL statement selects all fields from "Customers" where city is "Berlin" OR "M端nchen":
Example:
SELECT * FROM Customers
WHERE City='Berlin' OR City='M端nchen';

The following SQL statement selects all fields from "Customers" where country is "Germany" OR "Spain":
Example:
SELECT * FROM Customers
WHERE Country='Germany' OR Country='Spain';

The following SQL statement selects all fields from "Customers" where country is NOT "Germany":
Example:
SELECT * FROM Customers
WHERE NOT Country='Germany';

The following SQL statement selects all fields from "Customers" where country is "Germany" AND city must be "Berlin" OR "M端nchen" (use parenthesis to form complex expressions):
Example:
SELECT * FROM Customers
WHERE Country='Germany' AND (City='Berlin' OR City='M端nchen');

The following SQL statement selects all fields from "Customers" where country is NOT "Germany" and NOT "USA":
Example:
SELECT * FROM Customers
WHERE NOT Country='Germany' AND NOT Country='USA';

by the Chapter: SQL AND, OR and NOT Operators

Select all records where the City column has the value 'Berlin' and the PostalCode column has the value 12209.
SELECT * FROM Customers WHERE City='Berlin' AND PostalCode=12209;


ORDER BY Example (The ORDER BY keyword sorts the records in ascending order by default)
The following SQL statement selects all customers from the "Customers" table, sorted by the "Country" column:
SELECT * FROM Customers ORDER BY Country;

The following SQL statement selects all customers from the "Customers" table, sorted DESCENDING by the "Country" column:
SELECT * FROM Customers ORDER BY Country DESC;

The following SQL statement selects all customers from the "Customers" table, sorted by the "Country" and the "CustomerName" column. This means that it orders by Country, but if some rows have the same Country, it orders them by CustomerName:
SELECT * FROM Customers ORDER BY Country, CustomerName;

The following SQL statement selects all customers from the "Customers" table, sorted ascending by the "Country" and descending by the "CustomerName" column:
SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC;

The following SQL statement inserts a new record in the "Customers" table:
INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country) VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');

The following SQL statement will insert a new record, but only insert data in the "CustomerName", "City", and "Country" columns (CustomerID will be updated automatically):
INSERT INTO Customers (CustomerName, City, Country)
VALUES (Jihye, Baltimore, North Korea);

The IS NULL operator is used to test for empty values (NULL values).
The following SQL lists all customers with a NULL value in the "Address" field:
SELECT CustomerName, ContactName, Address FROM Customers WHERE Address IS NULL;

The IS NOT NULL operator is used to test for non-empty values (NOT NULL values).
The following SQL lists all customers with a value in the "Address" field:
SELECT CustomerName, ContactName, Address FROM Customers WHERE Address IS NOT NULL;

The UPDATE statement is used to modify the existing records in a table.
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

The following SQL statement updates the first customer (CustomerID = 1) with a new contact person and a new city.
UPDATE Customers SET ContactName = 'Saepo', City = 'Baltimore'
WHERE CustomerID = 1;

It is the WHERE clause that determines how many records will be updated.
The following SQL statement will update the ContactName to "Juan" for all records where country is "Mexico":
UPDATE Customers SET ContactName = 'Juan'
WHERE Country = 'Mexico';

Be careful when updating records. If you omit the WHERE clause, ALL records will be updated!
In the circumstance that you enter
UPDATE Customers SET ContactName='Juan'; --> All records for the column ContactName will change with 'Juan'

The DELETE statement is used to delete existing records in a table.
DELETE FROM table_name WHERE condition;

The following SQL statement deletes the customer "Alfreds Futterkiste" from the "Customers" table:
DELETE From Customers WHERE CustomerName = 'Alfreds Futterkiste';

It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:
DELETE FROM table_name;

The following SQL statement deletes all rows in the "Customers" table, without deleting the table:
DELETE FROM Customers;

The SQL SELECT TOP Clause
The SELECT TOP clause is used to specify the number of records to return.
The SELECT TOP clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.

SQL Server / MS Access Syntax:
SELECT TOP number|percent column_name(s)
FROM table_name WHERE condition;

MySQL Syntax:
SELECT column_name(s)
FROM table_name
WHERE condition LIMIT number;

Oracle 12 Syntax:
SELECT column_name(s)
FROM table_name
ORDER BY column_name(s)
FETCH FIRST number ROWS ONLY;


SQL TOP, LIMIT and FETCH FIRST Examples
The following SQL statement selects the first three records from the "Customers" table (for SQL Server/MS Access):
SELECT TOP 3 FROM Customers;

The following SQL statement shows the equivalent example for MySQL:
SELECT * FROM Customers LIMIT 3;

The following SQL statement shows the equivalent example for Oracle:
SELECT * FROM  Customers FETCH FIRST 3 ROWS ONLY;

SQL TOP PERCENT Example
The following SQL statement selects the first 50% of the records from the "Customers" table (for SQL Server/MS Access):
SELECT TOP 50 PERCENT * FROM Customers;

The following SQL statement shows the equivalent example for Oracle: (use FETCH syntax)
SELECT * FROM Customers FETCH FIRST 50 PERCENT ROWS ONLY;

ADD a WHERE CLAUSE
The following SQL statement selects the first three records from the "Customers" table, where the country is "Germany" (for SQL Server/MS Access):
SELECT TOP 3 * FROM Customers WHERE Country = 'Germany';


SQL MIN() and MAX() Functions
MIN() Syntax:

SELECT MIN(column_name)
FROM table_name
WHERE condition;

MAX() Syntax:

SELECT MAX(column_name)
FROM table_name
WHERE condition;

MIN() Example: The following SQL statement finds the price of the cheapest product:
SELECT MIN(Price) AS SmallestPrice
FROM Products;
(If I don't add the "AS function", the outcome shows with the weird column title)
















